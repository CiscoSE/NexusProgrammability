{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Programmability Overview This site covers many areas of programmability pertaining to Cisco's Nexus Operating System (NX-OS). NX-OS software running on Cisco Nexus 9000 Series switches is: Resilient - Providing critical business-class availability Modular - Has extensions that accommodate business needs Highly Programmatic - Allows for rapid automation and orchestration through Application Programming Interfaces (APIs) Secure - Protects and preserves data and operations Flexible - Integrates and enables new technologies Scalable - Accommodates and grows with the business and its requirements Easy to Use - Reduces the amount of learning required, simplifies deployment, and provides ease of manageability The Nexus 9000 homepage can be found below: Cisco Nexus 9000 Series Switches Please select one of the categories on the left side to learn about that programmability topic.","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#programmability-overview","text":"This site covers many areas of programmability pertaining to Cisco's Nexus Operating System (NX-OS). NX-OS software running on Cisco Nexus 9000 Series switches is: Resilient - Providing critical business-class availability Modular - Has extensions that accommodate business needs Highly Programmatic - Allows for rapid automation and orchestration through Application Programming Interfaces (APIs) Secure - Protects and preserves data and operations Flexible - Integrates and enables new technologies Scalable - Accommodates and grows with the business and its requirements Easy to Use - Reduces the amount of learning required, simplifies deployment, and provides ease of manageability The Nexus 9000 homepage can be found below: Cisco Nexus 9000 Series Switches Please select one of the categories on the left side to learn about that programmability topic.","title":"Programmability Overview"},{"location":"Telemetry/sensor-path/","text":"Common Sensor Paths Placeholder: common sensor paths of OC model and Native Model System Metric Openconfig Model Native Model Platform Metric Openconfig Model Native Model Interface Metric Openconfig Model Native Model interface counters /interfaces/interface/state/counters /System/intf-items/phys-items/PhysIf-list/dbgEtherStats-items BGP Metric Openconfig Model Native Model OSPF Metric Openconfig Model Native Model ISIS Metric Openconfig Model Native Model LLDP Metric Openconfig Model Native Model LACP Metric Openconfig Model Native Model","title":"Common Sensor Paths"},{"location":"Telemetry/sensor-path/#common-sensor-paths","text":"Placeholder: common sensor paths of OC model and Native Model","title":"Common Sensor Paths"},{"location":"Telemetry/sensor-path/#system","text":"Metric Openconfig Model Native Model","title":"System"},{"location":"Telemetry/sensor-path/#platform","text":"Metric Openconfig Model Native Model","title":"Platform"},{"location":"Telemetry/sensor-path/#interface","text":"Metric Openconfig Model Native Model interface counters /interfaces/interface/state/counters /System/intf-items/phys-items/PhysIf-list/dbgEtherStats-items","title":"Interface"},{"location":"Telemetry/sensor-path/#bgp","text":"Metric Openconfig Model Native Model","title":"BGP"},{"location":"Telemetry/sensor-path/#ospf","text":"Metric Openconfig Model Native Model","title":"OSPF"},{"location":"Telemetry/sensor-path/#isis","text":"Metric Openconfig Model Native Model","title":"ISIS"},{"location":"Telemetry/sensor-path/#lldp","text":"Metric Openconfig Model Native Model","title":"LLDP"},{"location":"Telemetry/sensor-path/#lacp","text":"Metric Openconfig Model Native Model","title":"LACP"},{"location":"Telemetry/yangsuite/","text":"Yangsuite","title":"Yangsuite"},{"location":"Telemetry/yangsuite/#yangsuite","text":"","title":"Yangsuite"},{"location":"Telemetry/dial-out/","text":"MDT Overview","title":"MDT Overview"},{"location":"Telemetry/dial-out/#mdt-overview","text":"","title":"MDT Overview"},{"location":"Telemetry/dial-out/configuration/","text":"","title":"Configuration"},{"location":"Telemetry/dial-out/telegraf/","text":"Use telegraf with NX-OS telemtry_collector *","title":"Use telegraf with NX-OS"},{"location":"Telemetry/dial-out/telegraf/#use-telegraf-with-nx-os","text":"telemtry_collector *","title":"Use telegraf with NX-OS"},{"location":"Telemetry/gNMI/","text":"gNMI Overview About gRPC gNMI is built on top of Google Remote Procedure Call (gRPC). gRPC is an open source high performance RPC framework released in 2016. It uses HTTP/2 for transport, protocol buffers for the interface description language, and includes the following features: authentication bi-directional streaming bi-direction flow control blocking bindings non-blocking bindings cancellation timeouts gRPC can generate cross-platform client and server bindings for many languages. It also supports TLS and token-based authentication. gRPC uses protocol buffers to encode data. About gNMI gRPC Network Management Interface (gNMI) is a specification of RPCs for managing or collecting the state of a device. The content provided through gNMI can be modeled using YANG. gRPC carries gNMI and provides the ability to create and transmit requests. NX-OS gNMI Features gNMI can be transmitted in two ways: Dial-In In this mode, the client will initiate the connection to the switch. Dial-Out In this mode, the switch will initiate the connection to the client. NX-OS supports the following gNMI RPCs: Get Set Subscribe Capabilities gNMI Device Configuration As mentioned above, gNMI relies on gRPC. A combination of gRPC and gNMI settings are required to configure this functionality on NX-OS. switch# feature grpc switch# grpc port 50051 Ports can be from 1024 to 65535. Default is 50051. switch# grpc certificate CertName CertName is the filename of your certificate file. switch# grpc gnmi max-concurrent-call 8 This is the limit of simulteneous dial-in calls. The limit can be from 1 to 16. Default is 8. switch# grpc use-vrf default Allows you to select which vrf to use for gNMI traffic. gNMI Subscription gNMI subscription can be used with both dial-in or dial-out methods. For dial-in subscriptions, the client has the configuration of what it would like from the switch. It will connect to the switch and pull the information listed in the client subscription configuration. For dial-out subscriptions, the switch has the configuration of what to provide to the client. It will connect to the client and send the information listed in the switch subscription configuration. Starting in NX-OS 9.3.1, Nexus switches support the following subscription features: Once Collect current values only once. Poll When the switch receives a poll message, it will send current values. Stream - Sample Collect current values every stream interval. Supported time interval ranges are from 1 to 604800 seconds. The default sample time is 10 seconds. Stream - On_Change Collect current values immediately. After this intiial collection, only collect values when there is a change. Stream - Target_Defined This allows the target to define the best type of subscription to use.","title":"gNMI Overview"},{"location":"Telemetry/gNMI/#gnmi-overview","text":"","title":"gNMI Overview"},{"location":"Telemetry/gNMI/#about-grpc","text":"gNMI is built on top of Google Remote Procedure Call (gRPC). gRPC is an open source high performance RPC framework released in 2016. It uses HTTP/2 for transport, protocol buffers for the interface description language, and includes the following features: authentication bi-directional streaming bi-direction flow control blocking bindings non-blocking bindings cancellation timeouts gRPC can generate cross-platform client and server bindings for many languages. It also supports TLS and token-based authentication. gRPC uses protocol buffers to encode data.","title":"About gRPC"},{"location":"Telemetry/gNMI/#about-gnmi","text":"gRPC Network Management Interface (gNMI) is a specification of RPCs for managing or collecting the state of a device. The content provided through gNMI can be modeled using YANG. gRPC carries gNMI and provides the ability to create and transmit requests.","title":"About gNMI"},{"location":"Telemetry/gNMI/#nx-os-gnmi-features","text":"gNMI can be transmitted in two ways: Dial-In In this mode, the client will initiate the connection to the switch. Dial-Out In this mode, the switch will initiate the connection to the client. NX-OS supports the following gNMI RPCs: Get Set Subscribe Capabilities","title":"NX-OS gNMI Features"},{"location":"Telemetry/gNMI/#gnmi-device-configuration","text":"As mentioned above, gNMI relies on gRPC. A combination of gRPC and gNMI settings are required to configure this functionality on NX-OS. switch# feature grpc switch# grpc port 50051 Ports can be from 1024 to 65535. Default is 50051. switch# grpc certificate CertName CertName is the filename of your certificate file. switch# grpc gnmi max-concurrent-call 8 This is the limit of simulteneous dial-in calls. The limit can be from 1 to 16. Default is 8. switch# grpc use-vrf default Allows you to select which vrf to use for gNMI traffic.","title":"gNMI Device Configuration"},{"location":"Telemetry/gNMI/#gnmi-subscription","text":"gNMI subscription can be used with both dial-in or dial-out methods. For dial-in subscriptions, the client has the configuration of what it would like from the switch. It will connect to the switch and pull the information listed in the client subscription configuration. For dial-out subscriptions, the switch has the configuration of what to provide to the client. It will connect to the client and send the information listed in the switch subscription configuration. Starting in NX-OS 9.3.1, Nexus switches support the following subscription features: Once Collect current values only once. Poll When the switch receives a poll message, it will send current values. Stream - Sample Collect current values every stream interval. Supported time interval ranges are from 1 to 604800 seconds. The default sample time is 10 seconds. Stream - On_Change Collect current values immediately. After this intiial collection, only collect values when there is a change. Stream - Target_Defined This allows the target to define the best type of subscription to use.","title":"gNMI Subscription"},{"location":"Telemetry/gNMI/certificate/","text":"Certificate requirements for secure connections As per gnmi specification : The session between the client and server MUST be encrypted using TLS - and a target or client MUST NOT fall back to unencrypted sessions. NX-OS only supports TLS connection on gRPC, mTLS is supported since 10.1(1). There are two certiciates used here: Server certificate: Used to encrypt the gRPC connection between the client and the device (in this case, the gNMI server or target) Client certificate: Used to authenticate a gRPC connection To create any type of certificate, a certificate authority (CA) is required. If you don't have one (or you are looking for something free), follow the steps in this excelent guide by Jamie Nguyen: OpenSSL Certificate Authority An acurate time is important when dealing with TLS certificates. It is recommended to setup NTP in the client and servers/devices. If you see errors related to certificate not valid yet or expired it is probably that the device or the client don't have a correct time set. For simplicity, this tutorial uses root but other users with less priviledges can be used. Make sure keys and certificates are protected Tests for this tutorial are done using gnmic and pygnmi Server certificate A server certificate will allow you to connect to a NX-OS device securely, without need of skipping TLS verification for TLS connections. !!! info It is assumed that you have a valid root and intermediate CA certificates installed in your workstation. Instructions can be found at the top of this article on how to set that up Add the subjectAltName setting Use the intermediate/openssl.cnf file (server_cert section): [ server_cert ] # Extensions for server certificates (`man x509v3_config`). basicConstraints = CA:FALSE subjectAltName=${ENV::SAN} nsCertType = server nsComment = \"OpenSSL Generated Server Certificate\" subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer:always keyUsage = critical, digitalSignature, keyEncipherment extendedKeyUsage = serverAuth The value ${ENV::SAN} instructs openssl to look for the value of the subjectAltName in an environmental variable called SAN Set the SAN variable. If you don't have a DNS available, you can manually add the host entry in the /etc/hosts file if you would like to use names instead of IPs. Either one works In this example, the device name is nx93000v-01.cisco.com and its management IP is 192.168.1.1 export SAN=DNS:nx9300v-01,DNS:nx9300v-01.cisco.com,IP:192.168.1.1 Create key and certificate Altough the file name is trivial, it is a best practice to use the hostname of the device or other identifier that sumarizes the purpuse of the certificate. You can use the same certificate for multiple devices Make sure to use server_cert extensions openssl genrsa -out intermediate/private/nx9300v-01.cisco.com.key.pem openssl req -config intermediate/openssl.cnf -key intermediate/private/nx9300v-01.cisco.com.key.pem -new -sha256 -out intermediate/csr/nx9300v-01.cisco.com.csr.pem (...) ----- Country Name (2 letter code) [GB]:US State or Province Name [England]:CO Locality Name []: Organization Name [Alice Ltd]:Nexus Organizational Unit Name []:Datacenter Common Name []:nx9300v-01.cisco.com Email Address []: openssl ca -config intermediate/openssl.cnf -extensions server_cert -days 375 -notext -md sha256 -in intermediate/csr/nx9300v-01.cisco.com.csr.pem -out intermediate/certs/nx9300v-01.cisco.com.cert.pem Verify the certificate Check that the alternative name section is present and has the values set in the previous step openssl x509 -noout -text -in intermediate/certs/nx9300v-01.cisco.com.cert.pem Create the certificate chain cat intermediate/certs/nx9300v-01.cisco.com.cert.pem > intermediate/certs/nx9300v-01.cisco.com.chain.cert.pem cat intermediate/certs/intermediate.cert.pem >> intermediate/certs/nx9300v-01.cisco.com.chain.cert.pem cat certs/ca.cert.pem >> intermediate/certs/nx9300v-01.cisco.com.chain.cert.pem Export the file into the device. Make sure to remember the export password openssl pkcs12 -export -out intermediate/certs/nx9300v-01.cisco.com.pfk -inkey intermediate/private/nx9300v-01.cisco.com.key.pem -in intermediate/certs/nx9300v-01.cisco.com.chain.cert.pem scp intermediate/certs/nx9300v-01.cisco.com.pfk admin@192.168.1.1: Import the pkcs12 file Execute the following commands on the device. For this example, \"supersecret\" was used as password the step before nx9300v_01# configure nx9300v_01(config)# crypto ca trustpoint server nx9300v_01(config)# crypto ca import server pkcs12 bootflash:nx9300v-01.cisco.com.pfk supersecret Configure grpc to use the truspoint above: nx9300v_01(config)# grpc certificate server Test with gnmic Use the certificate chain file, not the standalone certificate file. The --skip-verify option should not be needed # gnmic -a nx9300v-01.cisco.com:50051 -u admin -p YOURPASSWORD get --path /System/name --tls-cert intermediate/certs/nx9300v-01.cisco.com.chain.cert.pem --tls-key intermediate/private/nx9300v-01.cisco.com.key.pem -e json --tls-ca intermediate/certs/ca-chain.cert.pem Output [ { \"source\": \"nx9300v-01.cisco.com:50051\", \"timestamp\": 1657660857691587822, \"time\": \"2022-07-12T21:20:57.691587822Z\", \"updates\": [ { \"Path\": \"System/name\", \"values\": { \"System/name\": \"nx9300v-01\" } } ] } ] Test with pygnmi For simplicity, this example includes credentials in clear text, which is not a best practice. # Modules from pygnmi.client import gNMIclient import json # Variables host = ('nx9300v-01.cisco.com', '50051') paths = ['/System/name'] # Body if __name__ == '__main__': with gNMIclient(target=host, username='admin', password=\"YOURPASSWORD\", path_cert=\"./ca/intermediate/certs/nx9300v-01.cisco.com.chain.cert.pem\", path_key=\"./ca/intermediate/private/nx9300v-01.cisco.com.key.pem\", path_root=\"./ca/intermediate/certs/ca-chain.cert.pem\") as gc: result = gc.get(path=paths, encoding='json') print(result) print() # # python get-nx.py {'notification': [{'timestamp': 1657660901108756130, 'update': [{'path': 'System/name', 'val': 'nx9300v-01'}]}]} # Client certificate If you prefer to use a certificate and key instead of a password, you can create a client certificate that can be used to authenticate against the NX-OS device. It is assumed that you have a valid root and intermediate CA certificates installed in your workstation. Instructions can be found at the top of this article on how to set that up Create key and certificate Altough the file name is trivial, it is a best practice to use the username or other identifier that sumarizes the purpuse of the certificate, csr and keys. You can use the same certificate to login to multiple devices with the same username Make sure to use usr_cert extensions Use the username as value for Common Name and Organizational Unit Name # openssl genrsa -out intermediate/private/admin.key.pem 2048 # openssl req -config intermediate/openssl.cnf -key intermediate/private/admin.key.pem -new -sha256 -out intermediate/csr/admin.csr.pem ----- Country Name (2 letter code) [GB]:US State or Province Name [England]:CO Locality Name []: Organization Name [Alice Ltd]:Nexus Organizational Unit Name []:admin Common Name []:admin Email Address []: # openssl ca -config intermediate/openssl.cnf -extensions usr_cert -days 375 -notext -md sha256 -in intermediate/csr/admin.csr.pem -out intermediate/certs/admin.cert.pem Create the certificate chain cat intermediate/certs/admin.cert.pem > intermediate/certs/admin.chain.cert.pem cat intermediate/certs/intermediate.cert.pem >> intermediate/certs/admin.chain.cert.pem cat certs/ca.cert.pem >> intermediate/certs/admin.chain.cert.pem Import the CA certificate For this example, gnmi-root is used as trustpoint name but it can have any name. Use the content of the root certificate only (certs/ca.cert.pem) - no chains or intermediate certs are required Execute the following commands on the device: nx9300v_01# configure nx9300v_01(config)# crypto ca trustpoint gnmi-root nx9300v_01(config)# crypto ca authenticate gnmi-root input (cut & paste) CA certificate (chain) in PEM format; end the input with a line containing only END OF INPUT : -----BEGIN CERTIFICATE----- (...) -----END CERTIFICATE----- END OF INPUT (...) Do you accept this certificate? [yes/no]:yes Configure the grpc client root certificate: nx9300v_01(config)# grpc client root certificate gnmi-root Create gnmic config file You might need to change the tls files path to match your environment Password is not required anymore # cat .gnmic.yaml log-file: /tmp/gnmic.log debug: true tls-ca: ./intermediate/certs/ca-chain.cert.pem targets: 192.168.1.2:50051: username: admin tls-cert: ./intermediate/certs/admin.chain.cert.pem tls-key: ./intermediate/private/admin.key.pem Test with gnmic # gnmic get --path /System/name [ { \"source\": \"192.168.1.2:50051\", \"timestamp\": 1663693091279809206, \"time\": \"2022-09-20T12:58:11.279809206-04:00\", \"updates\": [ { \"Path\": \"System/name\", \"values\": { \"System/name\": \"nx9300v_01\" } } ] } ] #","title":"Certificate requirements for secure connections"},{"location":"Telemetry/gNMI/certificate/#certificate-requirements-for-secure-connections","text":"As per gnmi specification : The session between the client and server MUST be encrypted using TLS - and a target or client MUST NOT fall back to unencrypted sessions. NX-OS only supports TLS connection on gRPC, mTLS is supported since 10.1(1). There are two certiciates used here: Server certificate: Used to encrypt the gRPC connection between the client and the device (in this case, the gNMI server or target) Client certificate: Used to authenticate a gRPC connection To create any type of certificate, a certificate authority (CA) is required. If you don't have one (or you are looking for something free), follow the steps in this excelent guide by Jamie Nguyen: OpenSSL Certificate Authority An acurate time is important when dealing with TLS certificates. It is recommended to setup NTP in the client and servers/devices. If you see errors related to certificate not valid yet or expired it is probably that the device or the client don't have a correct time set. For simplicity, this tutorial uses root but other users with less priviledges can be used. Make sure keys and certificates are protected Tests for this tutorial are done using gnmic and pygnmi","title":"Certificate requirements for secure connections"},{"location":"Telemetry/gNMI/certificate/#server-certificate","text":"A server certificate will allow you to connect to a NX-OS device securely, without need of skipping TLS verification for TLS connections. !!! info It is assumed that you have a valid root and intermediate CA certificates installed in your workstation. Instructions can be found at the top of this article on how to set that up","title":"Server certificate"},{"location":"Telemetry/gNMI/certificate/#add-the-subjectaltname-setting","text":"Use the intermediate/openssl.cnf file (server_cert section): [ server_cert ] # Extensions for server certificates (`man x509v3_config`). basicConstraints = CA:FALSE subjectAltName=${ENV::SAN} nsCertType = server nsComment = \"OpenSSL Generated Server Certificate\" subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer:always keyUsage = critical, digitalSignature, keyEncipherment extendedKeyUsage = serverAuth The value ${ENV::SAN} instructs openssl to look for the value of the subjectAltName in an environmental variable called SAN","title":"Add the subjectAltName setting"},{"location":"Telemetry/gNMI/certificate/#set-the-san-variable","text":"If you don't have a DNS available, you can manually add the host entry in the /etc/hosts file if you would like to use names instead of IPs. Either one works In this example, the device name is nx93000v-01.cisco.com and its management IP is 192.168.1.1 export SAN=DNS:nx9300v-01,DNS:nx9300v-01.cisco.com,IP:192.168.1.1","title":"Set the SAN variable."},{"location":"Telemetry/gNMI/certificate/#create-key-and-certificate","text":"Altough the file name is trivial, it is a best practice to use the hostname of the device or other identifier that sumarizes the purpuse of the certificate. You can use the same certificate for multiple devices Make sure to use server_cert extensions openssl genrsa -out intermediate/private/nx9300v-01.cisco.com.key.pem openssl req -config intermediate/openssl.cnf -key intermediate/private/nx9300v-01.cisco.com.key.pem -new -sha256 -out intermediate/csr/nx9300v-01.cisco.com.csr.pem (...) ----- Country Name (2 letter code) [GB]:US State or Province Name [England]:CO Locality Name []: Organization Name [Alice Ltd]:Nexus Organizational Unit Name []:Datacenter Common Name []:nx9300v-01.cisco.com Email Address []: openssl ca -config intermediate/openssl.cnf -extensions server_cert -days 375 -notext -md sha256 -in intermediate/csr/nx9300v-01.cisco.com.csr.pem -out intermediate/certs/nx9300v-01.cisco.com.cert.pem","title":"Create key and certificate"},{"location":"Telemetry/gNMI/certificate/#verify-the-certificate","text":"Check that the alternative name section is present and has the values set in the previous step openssl x509 -noout -text -in intermediate/certs/nx9300v-01.cisco.com.cert.pem","title":"Verify the certificate"},{"location":"Telemetry/gNMI/certificate/#create-the-certificate-chain","text":"cat intermediate/certs/nx9300v-01.cisco.com.cert.pem > intermediate/certs/nx9300v-01.cisco.com.chain.cert.pem cat intermediate/certs/intermediate.cert.pem >> intermediate/certs/nx9300v-01.cisco.com.chain.cert.pem cat certs/ca.cert.pem >> intermediate/certs/nx9300v-01.cisco.com.chain.cert.pem","title":"Create the certificate chain"},{"location":"Telemetry/gNMI/certificate/#export-the-file-into-the-device","text":"Make sure to remember the export password openssl pkcs12 -export -out intermediate/certs/nx9300v-01.cisco.com.pfk -inkey intermediate/private/nx9300v-01.cisco.com.key.pem -in intermediate/certs/nx9300v-01.cisco.com.chain.cert.pem scp intermediate/certs/nx9300v-01.cisco.com.pfk admin@192.168.1.1:","title":"Export the file into the device."},{"location":"Telemetry/gNMI/certificate/#import-the-pkcs12-file","text":"Execute the following commands on the device. For this example, \"supersecret\" was used as password the step before nx9300v_01# configure nx9300v_01(config)# crypto ca trustpoint server nx9300v_01(config)# crypto ca import server pkcs12 bootflash:nx9300v-01.cisco.com.pfk supersecret Configure grpc to use the truspoint above: nx9300v_01(config)# grpc certificate server","title":"Import the pkcs12 file"},{"location":"Telemetry/gNMI/certificate/#test-with-gnmic","text":"Use the certificate chain file, not the standalone certificate file. The --skip-verify option should not be needed # gnmic -a nx9300v-01.cisco.com:50051 -u admin -p YOURPASSWORD get --path /System/name --tls-cert intermediate/certs/nx9300v-01.cisco.com.chain.cert.pem --tls-key intermediate/private/nx9300v-01.cisco.com.key.pem -e json --tls-ca intermediate/certs/ca-chain.cert.pem Output [ { \"source\": \"nx9300v-01.cisco.com:50051\", \"timestamp\": 1657660857691587822, \"time\": \"2022-07-12T21:20:57.691587822Z\", \"updates\": [ { \"Path\": \"System/name\", \"values\": { \"System/name\": \"nx9300v-01\" } } ] } ]","title":"Test with gnmic"},{"location":"Telemetry/gNMI/certificate/#test-with-pygnmi","text":"For simplicity, this example includes credentials in clear text, which is not a best practice. # Modules from pygnmi.client import gNMIclient import json # Variables host = ('nx9300v-01.cisco.com', '50051') paths = ['/System/name'] # Body if __name__ == '__main__': with gNMIclient(target=host, username='admin', password=\"YOURPASSWORD\", path_cert=\"./ca/intermediate/certs/nx9300v-01.cisco.com.chain.cert.pem\", path_key=\"./ca/intermediate/private/nx9300v-01.cisco.com.key.pem\", path_root=\"./ca/intermediate/certs/ca-chain.cert.pem\") as gc: result = gc.get(path=paths, encoding='json') print(result) print() # # python get-nx.py {'notification': [{'timestamp': 1657660901108756130, 'update': [{'path': 'System/name', 'val': 'nx9300v-01'}]}]} #","title":"Test with pygnmi"},{"location":"Telemetry/gNMI/certificate/#client-certificate","text":"If you prefer to use a certificate and key instead of a password, you can create a client certificate that can be used to authenticate against the NX-OS device. It is assumed that you have a valid root and intermediate CA certificates installed in your workstation. Instructions can be found at the top of this article on how to set that up","title":"Client certificate"},{"location":"Telemetry/gNMI/certificate/#create-key-and-certificate_1","text":"Altough the file name is trivial, it is a best practice to use the username or other identifier that sumarizes the purpuse of the certificate, csr and keys. You can use the same certificate to login to multiple devices with the same username Make sure to use usr_cert extensions Use the username as value for Common Name and Organizational Unit Name # openssl genrsa -out intermediate/private/admin.key.pem 2048 # openssl req -config intermediate/openssl.cnf -key intermediate/private/admin.key.pem -new -sha256 -out intermediate/csr/admin.csr.pem ----- Country Name (2 letter code) [GB]:US State or Province Name [England]:CO Locality Name []: Organization Name [Alice Ltd]:Nexus Organizational Unit Name []:admin Common Name []:admin Email Address []: # openssl ca -config intermediate/openssl.cnf -extensions usr_cert -days 375 -notext -md sha256 -in intermediate/csr/admin.csr.pem -out intermediate/certs/admin.cert.pem","title":"Create key and certificate"},{"location":"Telemetry/gNMI/certificate/#create-the-certificate-chain_1","text":"cat intermediate/certs/admin.cert.pem > intermediate/certs/admin.chain.cert.pem cat intermediate/certs/intermediate.cert.pem >> intermediate/certs/admin.chain.cert.pem cat certs/ca.cert.pem >> intermediate/certs/admin.chain.cert.pem","title":"Create the certificate chain"},{"location":"Telemetry/gNMI/certificate/#import-the-ca-certificate","text":"For this example, gnmi-root is used as trustpoint name but it can have any name. Use the content of the root certificate only (certs/ca.cert.pem) - no chains or intermediate certs are required Execute the following commands on the device: nx9300v_01# configure nx9300v_01(config)# crypto ca trustpoint gnmi-root nx9300v_01(config)# crypto ca authenticate gnmi-root input (cut & paste) CA certificate (chain) in PEM format; end the input with a line containing only END OF INPUT : -----BEGIN CERTIFICATE----- (...) -----END CERTIFICATE----- END OF INPUT (...) Do you accept this certificate? [yes/no]:yes Configure the grpc client root certificate: nx9300v_01(config)# grpc client root certificate gnmi-root","title":"Import the CA certificate"},{"location":"Telemetry/gNMI/certificate/#create-gnmic-config-file","text":"You might need to change the tls files path to match your environment Password is not required anymore # cat .gnmic.yaml log-file: /tmp/gnmic.log debug: true tls-ca: ./intermediate/certs/ca-chain.cert.pem targets: 192.168.1.2:50051: username: admin tls-cert: ./intermediate/certs/admin.chain.cert.pem tls-key: ./intermediate/private/admin.key.pem","title":"Create gnmic config file"},{"location":"Telemetry/gNMI/certificate/#test-with-gnmic_1","text":"# gnmic get --path /System/name [ { \"source\": \"192.168.1.2:50051\", \"timestamp\": 1663693091279809206, \"time\": \"2022-09-20T12:58:11.279809206-04:00\", \"updates\": [ { \"Path\": \"System/name\", \"values\": { \"System/name\": \"nx9300v_01\" } } ] } ] #","title":"Test with gnmic"},{"location":"Telemetry/gNMI/configuration/","text":"Configuration Placeholder: Configuration on NXOS","title":"Configuration"},{"location":"Telemetry/gNMI/configuration/#configuration","text":"Placeholder: Configuration on NXOS","title":"Configuration"},{"location":"Telemetry/gNMI/gnmic/","text":"Use gNMIc with NX-OS Placeholder: exmample of using gNMIc to test gNMI with NX-OS","title":"Use gNMIc with NX-OS"},{"location":"Telemetry/gNMI/gnmic/#use-gnmic-with-nx-os","text":"Placeholder: exmample of using gNMIc to test gNMI with NX-OS","title":"Use gNMIc with NX-OS"}]}